version: '3.8'

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./log/nginx:/var/log/nginx
    ports:
      - "80:80"
    environment:
      VITE_API_BASE_URL: http://localhost:80
      KEYCLOAK_URL: http://keycloak:18080
    networks:
      - my_network
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Exposing port 8081 externally to map to app's internal port 8080
    environment:
      PORT: 8080
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost:18080/realms/myrealm
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://localhost:18080/realms/myrealm/protocol/openid-connect/certs
      SPRING_DATASOURCE_URL: jdbc:sqlite:/data/panama.db?cache=shared
      ENCRYPTION_KEY: 1234567891234567
      GATEWAY_URL: http://gateway:8888
    volumes:
      - ./data:/data
    networks:
      - my_network
  gateway:
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8888:8888" # Exposing port 8082 externally to map to app's internal port 8080
    environment:
      GATEWAY_PORT: 8888
      SPRING_DATASOURCE_URL: jdbc:sqlite:/data/panama.db?cache=shared
      ENCRYPTION_KEY: 1234567891234567
    volumes:
      - ./data:/data
    networks:
      - my_network
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: start-dev --import-realm
    volumes:
      - ./keycloak/realm/data:/opt/keycloak/data/import
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres_svr
      KC_DB_URL_DATABASE: db_name
      KC_DB_PASSWORD: password
      KC_DB_USERNAME: user_name
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HTTP_PORT: 18080
    ports:
      - "18080:18080"
    depends_on:
      postgres_svr:
        condition: service_healthy
    restart: always
    networks:
      - my_network
  postgres_svr:
    container_name: postgres_svr
    image: postgres:12
    command: postgres -c 'max_connections=200' && postgres -c 'shared_buffers=24MB'
    environment:
      POSTGRES_DB: db_name
      POSTGRES_USER: user_name
      POSTGRES_PASSWORD: password
    healthcheck:
      test: "exit 0"
    ports:
      - "5432:5432"
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
